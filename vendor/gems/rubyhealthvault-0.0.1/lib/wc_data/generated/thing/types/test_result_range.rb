# -*- ruby -*-
#--
# Copyright 2008 Danny Coates, Ashkan Farhadtouski
# All rights reserved.
# See LICENSE for permissions.
#++
# AUTOGENERATED ComplexType

module HealthVault
  module WCData
  module Thing
  module Types
  
      class Testresultrange < ComplexType
        
     
       
        #<b>REQUIRED</b>
        #<b>summary</b>: The type of the range.
#<b>preferred-vocabulary</b>: Contact the HealthVault team to help define this vocabulary.
#<em>value</em> is a HealthVault::WCData::Thing::Types::Codablevalue
        def type=(value)
          @children['type'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Codablevalue
        def type
          return @children['type'][:value]
        end
       
     
       
        #<b>REQUIRED</b>
        #<b>summary</b>: The minimum and maximum of the range.
#<em>value</em> is a HealthVault::WCData::Thing::Types::Doublerange
        def range=(value)
          @children['range'][:value] = value
        end
        
        #<b>returns</b>: a HealthVault::WCData::Thing::Types::Doublerange
        def range
          return @children['range'][:value]
        end
       
  
      
        def initialize
          super
          self.tag_name = 'test-result-range'
        
          
          @children['type'] = {:name => 'type', :class => HealthVault::WCData::Thing::Types::Codablevalue, :value => nil, :min => 1, :max => 1, :order => 1, :place => :element, :choice => 0 }
            
          @children['type'][:value] = HealthVault::WCData::Thing::Types::Codablevalue.new
            
          
        
          
          @children['range'] = {:name => 'range', :class => HealthVault::WCData::Thing::Types::Doublerange, :value => nil, :min => 1, :max => 1, :order => 2, :place => :element, :choice => 0 }
            
          @children['range'][:value] = HealthVault::WCData::Thing::Types::Doublerange.new
            
          
        
        end
      end
  end
  end
  
  end
end
